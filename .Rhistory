"total_amount" = "Amount Change (KSh)",
"incidences" = "Case Change",
"cost_per_claim" = "Cost/Claim Change (KSh)",
"pct_change" = "Percentage Change")
# Create proper period labels
period1_label <- paste0(
switch(input$period_type,
"Month" = "M",
"Quarter" = "Q",
"Half" = "H",
"Year" = "Y"),
input$period_1, " ", input$year_1
)
period2_label <- paste0(
switch(input$period_type,
"Month" = "M",
"Quarter" = "Q",
"Half" = "H",
"Year" = "Y"),
input$period_2, " ", input$year_2
)
# Create row-specific hover text
df$hover_text <- paste0(
input$category, ": ", df[[input$category]], "<br>",
period1_label, " Value: ",
ifelse(
input$metric == "pct_change",
percent(
df[[paste0("Amount - ", clean_names(paste0(input$period_type, "_", input$period_1, "_", input$year_1)))]]
/ ifelse(
input$metric == "total_amount",
1,
df[[paste0("Cases - ", clean_names(paste0(input$period_type, "_", input$period_1, "_", input$year_1)))]]
),
accuracy = 0.1
),
format_kes(
df[[paste0("Amount - ", clean_names(paste0(input$period_type, "_", input$period_1, "_", input$year_1)))]]
)
),
"<br>",
period2_label, " Value: ",
ifelse(
input$metric == "pct_change",
percent(
df[[paste0("Amount - ", clean_names(paste0(input$period_type, "_", input$period_2, "_", input$year_2)))]]
/ ifelse(
input$metric == "total_amount",
1,
df[[paste0("Cases - ", clean_names(paste0(input$period_type, "_", input$period_2, "_", input$year_2)))]]
),
accuracy = 0.1
),
format_kes(
df[[paste0("Amount - ", clean_names(paste0(input$period_type, "_", input$period_2, "_", input$year_2)))]]
)
),
"<br>",
y_label, ": ",
ifelse(
input$metric == "pct_change",
percent(df[[y_var]], accuracy = 0.1),
format_kes(df[[y_var]])
)
)
p <- ggplot(df, aes(
x = reorder(!!sym(input$category), .data[[y_var]]),
y = .data[[y_var]],
fill = .data[[y_var]] > 0,
text = .data[["hover_text"]]  # FIX 1: Correctly map hover text
)) +
geom_col() +
coord_flip() +
labs(
title = paste("Top", input$top_n, clean_names(input$category), "by", y_label),
x = "", y = y_label
) +
scale_fill_manual(values = c("TRUE" = "#1f77b4", "FALSE" = "#d62728")) +
theme_minimal() +
theme(legend.position = "none")
if (input$metric == "pct_change") {
p <- p + scale_y_continuous(labels = percent)
} else if (input$metric %in% c("total_amount", "cost_per_claim")) {
p <- p + scale_y_continuous(labels = function(x) format_kes(x))
} else {
p <- p + scale_y_continuous(labels = comma)
}
ggplotly(p, tooltip = "text") %>%
layout(
margin = list(l = 150),
yaxis = list(  # FIX 2: Apply format to y-axis because of coord_flip()
tickformat = ",.0f",
tickprefix = "KSh "
)
)
})
# Comparison table
output$comparisonTable <- renderDT({
df <- comparison_table_data()
validate(
need(!is.null(df) && nrow(df) > 0,
"No data available for selected comparison.")
)
dt <- datatable(df,
rownames = FALSE,
extensions = 'Buttons',
options = list(
scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel'),
pageLength = 10
)) %>%
formatCurrency(columns = grep("Amount", names(df)), currency = "KSh ", digits = 0) %>%
formatRound(columns = grep("Cost/Claim", names(df)), digits = 0) %>%
formatPercentage(columns = "Percentage Change", digits = 1)
if ("Cases" %in% names(df)) {
dt <- dt %>% formatRound(columns = grep("Cases", names(df)), digits = 0)
}
dt
})
# Enhanced summary section
output$comparisonSummary <- renderUI({
full_df <- full_comparison_table()
validate(
need(nrow(full_df) > 0,
"No data available for selected time periods.")
)
amount_baseline_col <- clean_names(paste0("total_amount - ", input$period_type, "_", input$period_1, "_", input$year_1))
amount_comparison_col <- clean_names(paste0("total_amount - ", input$period_type, "_", input$period_2, "_", input$year_2))
cases_baseline_col <- clean_names(paste0("incidences - ", input$period_type, "_", input$period_1, "_", input$year_1))
cases_comparison_col <- clean_names(paste0("incidences - ", input$period_type, "_", input$period_2, "_", input$year_2))
validate(
need(amount_baseline_col %in% colnames(full_df), "Amount baseline data not available"),
need(amount_comparison_col %in% colnames(full_df), "Amount comparison data not available"),
need(cases_baseline_col %in% colnames(full_df), "Cases baseline data not available"),
need(cases_comparison_col %in% colnames(full_df), "Cases comparison data not available")
)
total_amount_baseline <- sum(full_df[[amount_baseline_col]], na.rm = TRUE)
total_amount_comparison <- sum(full_df[[amount_comparison_col]], na.rm = TRUE)
amount_pct_change <- ifelse(total_amount_baseline == 0,
ifelse(total_amount_comparison == 0, 0, Inf),
(total_amount_comparison - total_amount_baseline) / total_amount_baseline)
total_cases_baseline <- sum(full_df[[cases_baseline_col]], na.rm = TRUE)
total_cases_comparison <- sum(full_df[[cases_comparison_col]], na.rm = TRUE)
cases_pct_change <- ifelse(total_cases_baseline == 0,
ifelse(total_cases_comparison == 0, 0, Inf),
(total_cases_comparison - total_cases_baseline) / total_cases_baseline)
avg_cost_baseline <- ifelse(total_cases_baseline > 0,
total_amount_baseline / total_cases_baseline,
0)
avg_cost_comparison <- ifelse(total_cases_comparison > 0,
total_amount_comparison / total_cases_comparison,
0)
df_top5 <- comparison_table_data() %>% head(5)
top_contributors <- paste(df_top5[[input$category]], collapse = ", ")
period1_label <- paste0(input$period_type, " ", input$period_1, " ", input$year_1)
period2_label <- paste0(input$period_type, " ", input$period_2, " ", input$year_2)
amount_change_text <- ifelse(
is.infinite(amount_pct_change), "&#8734;",
paste0(
ifelse(amount_pct_change >= 0, "+", ""),
percent(amount_pct_change, accuracy = 0.1)
)
)
cases_change_text <- ifelse(
is.infinite(cases_pct_change), "&#8734;",
paste0(
ifelse(cases_pct_change >= 0, "+", ""),
percent(cases_pct_change, accuracy = 0.1)
)
)
HTML(paste0(
"<h4>Period Comparison: ", period1_label,
" vs ", period2_label, "</h4>",
"<ul>",
"<li><b>Total Amount:</b> ", format_kes(total_amount_baseline), " &#8594; ", format_kes(total_amount_comparison),
" (", amount_change_text, ")</li>",
"<li><b>Total Cases:</b> ", comma(total_cases_baseline), " &#8594; ", comma(total_cases_comparison),
" (", cases_change_text, ")</li>",
"<li><b>Average Cost/Claim:</b> ", format_kes(avg_cost_baseline),
" &#8594; ", format_kes(avg_cost_comparison), "</li>",
"</ul>",
"<h4>Key Drivers:</h4>",
"<p>", top_contributors, "</p>"
))
})
# Drill-down data
drill_down_data <- reactive({
req(input$drill_item, input$drill_category)
rv$pool %>%
filter(!!sym(input$drill_category) == input$drill_item)
})
# Drill-down analysis table
drill_down_table <- reactive({
req(drill_down_data(), input$drill_by_category)
d1 <- get_period_data(drill_down_data(), input$period_type, input$period_1, input$year_1)
d2 <- get_period_data(drill_down_data(), input$period_type, input$period_2, input$year_2)
combined <- bind_rows(d1, d2)
validate(
need(nrow(combined) > 0, "No drill-down data found for selected time periods.")
)
comparison_table <- combined %>%
group_by(!!sym(input$drill_by_category), PeriodLabel) %>%
summarise(
incidences = n(),
total_amount = sum(Claim_Amount, na.rm = TRUE),
cost_per_claim = ifelse(incidences == 0, NA_real_, total_amount / incidences),
.groups = "drop"
) %>%
pivot_wider(
names_from = PeriodLabel,
values_from = c(incidences, total_amount, cost_per_claim)
)
baseline_label <- paste0(input$period_type, "_", input$period_1, "_", input$year_1)
comparison_label <- paste0(input$period_type, "_", input$period_2, "_", input$year_2)
comparison_table %>%
mutate(
incidences_diff = .data[[paste0("incidences_", comparison_label)]] -
.data[[paste0("incidences_", baseline_label)]],
amount_diff = .data[[paste0("total_amount_", comparison_label)]] -
.data[[paste0("total_amount_", baseline_label)]],
cost_per_claim_diff = .data[[paste0("cost_per_claim_", comparison_label)]] -
.data[[paste0("cost_per_claim_", baseline_label)]],
incidences_pct_change = ifelse(.data[[paste0("incidences_", baseline_label)]] == 0,
ifelse(.data[[paste0("incidences_", comparison_label)]] == 0, 0, Inf),
incidences_diff / .data[[paste0("incidences_", baseline_label)]]),
amount_pct_change = ifelse(.data[[paste0("total_amount_", baseline_label)]] == 0,
ifelse(.data[[paste0("total_amount_", comparison_label)]] == 0, 0, Inf),
amount_diff / .data[[paste0("total_amount_", baseline_label)]]),
cost_per_claim_pct_change = ifelse(.data[[paste0("cost_per_claim_", baseline_label)]] == 0,
ifelse(.data[[paste0("cost_per_claim_", comparison_label)]] == 0, 0, Inf),
cost_per_claim_diff / .data[[paste0("cost_per_claim_", baseline_label)]])
) %>%
arrange(desc(abs(amount_diff)))
})
# Drill-down trend plot
output$trendPlot <- renderPlotly({
df <- drill_down_data()
validate(
need(nrow(df) > 0, "No trend data available for selected item.")
)
df <- df %>%
group_by(Payrun_Date) %>%
summarise(
total_amount = sum(Claim_Amount, na.rm = TRUE),
incidences = n(),
cost_per_claim = total_amount / incidences,
.groups = "drop"
)
y_var <- switch(input$drill_metric,
"total_amount" = "total_amount",
"incidences" = "incidences",
"cost_per_claim" = "cost_per_claim")
y_label <- switch(input$drill_metric,
"total_amount" = "Claim Amount (KSh)",
"incidences" = "Number of Cases",
"cost_per_claim" = "Cost Per Claim (KSh)")
p <- ggplot(df, aes(x = Payrun_Date, y = !!sym(y_var))) +
geom_line(color = "#1f77b4") +
geom_point(color = "#d62728") +
labs(title = paste("Trend Analysis for", input$drill_item),
x = "Date", y = y_label) +
theme_minimal()
if (input$drill_metric == "total_amount" || input$drill_metric == "cost_per_claim") {
p <- p + scale_y_continuous(labels = function(x) format_kes(x))
} else {
p <- p + scale_y_continuous(labels = comma)
}
ggplotly(p) %>% layout(hovermode = "x unified")
})
# Composition plots
output$currentCompositionPlot <- renderPlotly({
df <- drill_down_data() %>%
filter(Year == input$year_2)
validate(
need(nrow(df) > 0, "No data available for current period.")
)
metric_value <- switch(input$drill_metric,
"total_amount" = "Claim_Amount",
"incidences" = NULL,
"cost_per_claim" = "Claim_Amount")
if (input$drill_metric == "incidences") {
df_grouped <- df %>%
group_by(!!sym(input$drill_by_category)) %>%
summarise(Value = n(), .groups = "drop") %>%
arrange(desc(Value))
} else {
df_grouped <- df %>%
group_by(!!sym(input$drill_by_category)) %>%
summarise(Value = sum(!!sym(metric_value), na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Value))
}
if (nrow(df_grouped) > input$top_items) {
df_grouped <- df_grouped %>%
mutate(Category = ifelse(row_number() <= input$top_items,
as.character(!!sym(input$drill_by_category)),
"Other")) %>%
group_by(Category) %>%
summarise(Value = sum(Value))
} else {
df_grouped <- df_grouped %>%
rename(Category = !!sym(input$drill_by_category))
}
period_label <- paste0(input$period_type, " ", input$period_2, " ", input$year_2)
plot_ly(df_grouped, labels = ~Category, values = ~Value, type = "pie",
textinfo = "label+percent",
hoverinfo = "label+percent+value",
insidetextorientation = "radial",
textposition = 'inside',
texttemplate = "%{label}<br>%{percent}") %>%
layout(title = paste(period_label, "Composition"),
showlegend = FALSE,
margin = list(l = 20, r = 20, b = 20, t = 40))
})
output$comparisonCompositionPlot <- renderPlotly({
df <- drill_down_data() %>%
filter(Year == input$year_1)
validate(
need(nrow(df) > 0, "No data available for comparison period.")
)
metric_value <- switch(input$drill_metric,
"total_amount" = "Claim_Amount",
"incidences" = NULL,
"cost_per_claim" = "Claim_Amount")
if (input$drill_metric == "incidences") {
df_grouped <- df %>%
group_by(!!sym(input$drill_by_category)) %>%
summarise(Value = n(), .groups = "drop") %>%
arrange(desc(Value))
} else {
df_grouped <- df %>%
group_by(!!sym(input$drill_by_category)) %>%
summarise(Value = sum(!!sym(metric_value), na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Value))
}
if (nrow(df_grouped) > input$top_items) {
df_grouped <- df_grouped %>%
mutate(Category = ifelse(row_number() <= input$top_items,
as.character(!!sym(input$drill_by_category)),
"Other")) %>%
group_by(Category) %>%
summarise(Value = sum(Value))
} else {
df_grouped <- df_grouped %>%
rename(Category = !!sym(input$drill_by_category))
}
period_label <- paste0(input$period_type, " ", input$period_1, " ", input$year_1)
plot_ly(df_grouped, labels = ~Category, values = ~Value, type = "pie",
textinfo = "label+percent",
hoverinfo = "label+percent+value",
insidetextorientation = "radial",
textposition = 'inside',
texttemplate = "%{label}<br>%{percent}") %>%
layout(title = paste(period_label, "Composition"),
showlegend = FALSE,
margin = list(l = 20, r = 20, b = 20, t = 40))
})
# Change Analysis table
output$detailedChangesTable <- renderDT({
df <- drill_down_table()
validate(
need(!is.null(df) && nrow(df) > 0, "No change data available for selected item.")
)
names(df) <- gsub(paste0("_", input$period_type, "_"), " ", names(df))
names(df) <- gsub(paste0("_", input$year_1), " Baseline", names(df))
names(df) <- gsub(paste0("_", input$year_2), " Comparison", names(df))
names(df) <- clean_names(names(df))
datatable(df,
rownames = FALSE,
extensions = 'Buttons',
options = list(
scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel'),
pageLength = 10
)) %>%
formatCurrency(columns = grep("Amount", names(df)), currency = "KSh ", digits = 0) %>%
formatRound(columns = grep("Cost/Claim", names(df)), digits = 0) %>%
formatPercentage(columns = grep("pct change", names(df)), digits = 1) %>%
formatStyle(
columns = grep("diff|pct change", names(df)),
color = styleInterval(0, c("#d62728", "#1f77b4"))
)
})
# Debugging outputs
output$data_quality <- renderUI({
# Use dbGetQuery for a count query
total_records_query <- "SELECT COUNT(*) FROM medical_claims"
total_records <- pool::dbGetQuery(pool, total_records_query)[[1]]
# Check if there are any records before getting date/year info
if (total_records == 0) {
return(tags$p("No data available in the database. Please upload a file to begin."))
}
# Get date range and years from the database
date_range_query <- "SELECT MIN(\"Payrun_Date\"), MAX(\"Payrun_Date\") FROM medical_claims"
date_range_data <- pool::dbGetQuery(pool, date_range_query)
years_query <- "SELECT DISTINCT \"Year\" FROM medical_claims ORDER BY \"Year\""
years_data <- pool::dbGetQuery(pool, years_query)
tags$ul(
tags$li(paste("Total records:", total_records)),
tags$li(paste("Date range:", date_range_data[[1]], "to", date_range_data[[2]])),
tags$li(paste("Years available:", paste(years_data[[1]], collapse = ", ")))
)
})
output$debug <- renderPrint({
df <- analysis_data()
list(
periods_selected = paste(input$period_type, input$period_1, input$year_1, "vs",
input$period_type, input$period_2, input$year_2),
records_available = nrow(df),
half_yearly_check = if(input$period_type == "Half") {
df %>% group_by(Half, Year) %>% tally()
} else NULL
)
})
}
shinyApp(ui, server)
# Function to list all files and folders recursively
list_directory_contents <- function(C:\\Users\\Allan.Nyariki\\OneDrive - Liberty Group (Liberty and Heritage)\\Actuarial\\Medical_Data, indent = "") {
# Function to list all files and folders recursively
list_directory_contents <- function("C:\\Users\\Allan.Nyariki\\OneDrive - Liberty Group (Liberty and Heritage)\\Actuarial\\Medical_Data", indent = "") {
# Function to list all files and folders recursively
list_directory_contents <- function("C:\\Users\\Allan.Nyariki\\OneDrive - Liberty Group (Liberty and Heritage)\\Actuarial\\Medical_Data") {
# Function to list all files and folders recursively
list_directory_contents <- function(path, indent = "") {
# Get all items in the directory
items <- list.files(path, full.names = TRUE)
for (item in items) {
# Print the item name with indentation
cat(indent, basename(item), "\n")
# If the item is a directory, recurse into it
if (file.info(item)$isdir) {
list_directory_contents(item, indent = paste0(indent, "  "))
}
}
}
# 🔍 Call the function with your actual path
list_directory_contents("C:/Users/Allan.Nyariki/OneDrive - Liberty Group (Liberty and Heritage)/Actuarial/Medical_Data")
# Function to list all files and folders recursively
list_directory_contents <- function(path, indent = "") {
# Get all items in the directory
items <- list.files(path, full.names = TRUE)
for (item in items) {
# Print the item name with indentation
cat(indent, basename(item), "\n")
# If the item is a directory, recurse into it
if (file.info(item)$isdir) {
list_directory_contents(item, indent = paste0(indent, "  "))
}
}
}
# 🔍 Call the function with your actual path
list_directory_contents("C:/Users/Allan.Nyariki/OneDrive - Liberty Group (Liberty and Heritage)/Actuarial/Medical_Data")
rsconnect::deployApp('prepare_data_app.R')
rsconnect::deployApp(appFiles = 'prepare_data_app.R')
rsconnect::deployApp(appFiles = 'prepare_data_app.R', appMode = 'shiny', appName = 'medical_data_uploader')
rsconnect::deployApp(appFiles = 'prepare_data_app.R', appMode = 'shiny', appName = 'medical_data_uploader')
rsconnect::deployApp(appFiles = 'prepare_data_app.R', appMode = 'shiny', appName = 'medical_data_uploader')
rsconnect::setDeploymentEnvironment(
appName = "medical_data_uploader",
envVars = c(
PG_HOST = "ep-orange-hill-a92g0yml-pooler.gwc.azure.neon.tech",
PG_USER = "neondb_owner",
PG_PASSWORD = "npg_0hlRg1UTsBXf",
PG_DBNAME = "medical_claims",
PG_PORT = 5432
)
)
rsconnect::deployApp(
appFiles = 'prepare_data_app.R',
appMode = 'shiny',
appName = 'medical_data_uploader',
envVars = c(
PG_HOST = "ep-orange-hill-a92g0yml-pooler.gwc.azure.neon.tech",
PG_USER = "neondb_owner",
PG_PASSWORD = "npg_0hlRg1UTsBXf",
PG_DBNAME = "medical_claims",
PG_PORT = "5432"
)
)
rsconnect::deployApp(
appFiles = 'prepare_data_app.R',
appMode = 'shiny',
appName = 'medical_data_uploader'
)
runApp('prepare_data_app.R')
rsconnect::deployApp(
appFiles = 'prepare_data_app.R',
appMode = 'shiny',
appName = 'medical_data_uploader'
)
rsconnect::deployApp(
appFiles = 'prepare_data_app.R',
appMode = 'shiny',
appName = 'medical_data_uploader'
)
rsconnect::deployApp(
appFiles = 'prepare_data_app.R',
appMode = 'shiny',
appName = 'medical_data_uploader'
)
rsconnect::deployApp(
+     appFiles = 'prepare_data_app.R',
rsconnect::deployApp(
appFiles = 'prepare_data_app.R',
appMode = 'shiny',
appName = 'medical_data_uploader'
)
rsconnect::deployApp()
rsconnect::deployApp( appFiles = 'test_app.R')
rsconnect::deployApp( appFiles = 'test_app.R')
runApp('test_app.R')
